/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sotrc.client.gui;

import java.awt.Color;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import common.*;
import sotrc.client.*;
import sotrc.common.Contact;

/**
 *
 * @author spencer
 */
public class SotrcActionsGUI extends javax.swing.JFrame implements Observer {
    public static final Color VERIFIED_COLOR = new Color(140, 255, 160);
    public static final Color INAUTHENTIC_COLOR = new Color(255, 176, 160);
    public static final Color SELECTED_COLOR = new Color(57, 105, 138);
    private ClientManager manager;
    private SotrcClientGUI parentWindow;
    private String activeUserSelectedUser;
    private String contactSelectedUser;
    private ConcurrentHashMap<UUID, ChatWindow> activeChatWindows;
    /**
     * Creates new form SotrcActionsGUI
     */
    public SotrcActionsGUI(ClientManager man, SotrcClientGUI gui) {
        manager = man;
        parentWindow = gui;
        activeUserSelectedUser = "";
        activeChatWindows = new ConcurrentHashMap<>();
        initComponents();
        setupComponents();
        addActiveChatsTableSelectListener();
        addContactsTableSelectListener();
        manager.addObserver(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        activeChatsRightClickMenu = new javax.swing.JPopupMenu();
        openChat = new javax.swing.JMenuItem();
        quitChat = new javax.swing.JMenuItem();
        contactsRightClickMenu = new javax.swing.JPopupMenu();
        startChatRightClick = new javax.swing.JMenuItem();
        removeContact = new javax.swing.JMenuItem();
        verifyUser = new javax.swing.JMenuItem();
        StartChatPanel = new javax.swing.JPanel();
        txtStartChat = new javax.swing.JTextField();
        startChatButton = new javax.swing.JButton();
        ActiveChatsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        activeChatsTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }

            @Override
            public Class<?> getColumnClass(int column) {
                if (column == 1) {
                    return Boolean.class;
                } else {
                    return String.class;
                }
            }
        };
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        contactsTable = new javax.swing.JTable() {
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }

            @Override
            public Class<?> getColumnClass(int column) {
                if (column == 1) {
                    return Boolean.class;
                } else {
                    return String.class;
                }
            }
        };
        SOTRCMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        logoutFileMenu = new javax.swing.JMenuItem();
        userMenu = new javax.swing.JMenu();
        editUserUserMenu = new javax.swing.JMenuItem();
        getFingerprintUserMenu = new javax.swing.JMenuItem();
        userMenuDeleteAccount = new javax.swing.JMenuItem();

        openChat.setText("Open Chat");
        openChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openChatActionPerformed(evt);
            }
        });
        activeChatsRightClickMenu.add(openChat);

        quitChat.setText("Quit Chat");
        quitChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitChatActionPerformed(evt);
            }
        });
        activeChatsRightClickMenu.add(quitChat);

        startChatRightClick.setText("Start Chat");
        startChatRightClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startChatRightClickActionPerformed(evt);
            }
        });
        contactsRightClickMenu.add(startChatRightClick);

        removeContact.setText("Remove contact");
        removeContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeContactActionPerformed(evt);
            }
        });
        contactsRightClickMenu.add(removeContact);

        verifyUser.setText("Verify User");
        verifyUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyUserActionPerformed(evt);
            }
        });
        contactsRightClickMenu.add(verifyUser);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        StartChatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Start Chat"));

        startChatButton.setText("Chat");
        startChatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startChatButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StartChatPanelLayout = new javax.swing.GroupLayout(StartChatPanel);
        StartChatPanel.setLayout(StartChatPanelLayout);
        StartChatPanelLayout.setHorizontalGroup(
            StartChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StartChatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StartChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtStartChat)
                    .addGroup(StartChatPanelLayout.createSequentialGroup()
                        .addGap(0, 81, Short.MAX_VALUE)
                        .addComponent(startChatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        StartChatPanelLayout.setVerticalGroup(
            StartChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StartChatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtStartChat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(startChatButton)
                .addContainerGap())
        );

        ActiveChatsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Active Chats"));

        activeChatsTable.setModel(getActiveChatsTableModel());
        activeChatsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(activeChatsTable);
        activeChatsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout ActiveChatsPanelLayout = new javax.swing.GroupLayout(ActiveChatsPanel);
        ActiveChatsPanel.setLayout(ActiveChatsPanelLayout);
        ActiveChatsPanelLayout.setHorizontalGroup(
            ActiveChatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ActiveChatsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addContainerGap())
        );
        ActiveChatsPanelLayout.setVerticalGroup(
            ActiveChatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ActiveChatsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Contacts"));

        contactsTable.setModel(getContactListTableData());
        jScrollPane2.setViewportView(contactsTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileMenu.setText("File");

        logoutFileMenu.setText("Logout");
        logoutFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(logoutFileMenu);

        SOTRCMenu.add(fileMenu);

        userMenu.setText("User");
        userMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userMenuActionPerformed(evt);
            }
        });

        editUserUserMenu.setText("Edit User Info");
        editUserUserMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUserUserMenuActionPerformed(evt);
            }
        });
        userMenu.add(editUserUserMenu);

        getFingerprintUserMenu.setText("Get key fingerprint");
        getFingerprintUserMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getFingerprintUserMenuActionPerformed(evt);
            }
        });
        userMenu.add(getFingerprintUserMenu);

        userMenuDeleteAccount.setText("Delete User Account");
        userMenuDeleteAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userMenuDeleteAccountActionPerformed(evt);
            }
        });
        userMenu.add(userMenuDeleteAccount);

        SOTRCMenu.add(userMenu);

        setJMenuBar(SOTRCMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StartChatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ActiveChatsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(StartChatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ActiveChatsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startChatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startChatButtonActionPerformed
        String inviteUsername = txtStartChat.getText();
        startChat(inviteUsername);        
    }//GEN-LAST:event_startChatButtonActionPerformed

    private void logoutFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutFileMenuActionPerformed
        logout();
    }//GEN-LAST:event_logoutFileMenuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        boolean shouldLogout = logout();
        if(!shouldLogout) {
                return;
        }
    }//GEN-LAST:event_formWindowClosing

    private void userMenuDeleteAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userMenuDeleteAccountActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null,
                            "Are you sure you want to delete your account?",
                            "Delete Account?",
                            JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION) {
                boolean success = manager.deleteAccount();
                if (success) {
                        JOptionPane.showMessageDialog(this, "Account deleted", "SOTRC", JOptionPane.INFORMATION_MESSAGE);
                        parentWindow.setVisible(true);
                        this.dispose();
                } else {
                        JOptionPane.showMessageDialog(this, "Account deletion failed", "SOTRC", JOptionPane.ERROR_MESSAGE);
                }
        }
    }//GEN-LAST:event_userMenuDeleteAccountActionPerformed

    private void editUserUserMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUserUserMenuActionPerformed
        EditUserInfoGUI frame = new EditUserInfoGUI(manager);
        frame.setTitle("User Info");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_editUserUserMenuActionPerformed

    private void openChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openChatActionPerformed
        UUID uuid = getUUIDbyUsername(activeUserSelectedUser);
        if(uuid == null)
            return;
        ChatWindow window = activeChatWindows.get(uuid);
        activeUserSelectedUser = "";
        window.setVisible(true);
        activeChatsTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_openChatActionPerformed

    private void quitChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitChatActionPerformed
        UUID uuid = getUUIDbyUsername(activeUserSelectedUser);
        if (uuid == null) return;
        activeChatWindows.get(uuid).dispose();
        activeChatWindows.remove(uuid);
        activeUserSelectedUser = "";
        manager.endChat(uuid);
        updateActiveChatsTable();
        activeChatsTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_quitChatActionPerformed

    private void verifyUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyUserActionPerformed
        String s = (String)JOptionPane.showInputDialog(this,"Please enter this user's public key fingerprint:", "Verify User",
                    JOptionPane.PLAIN_MESSAGE, null, null,"");
        try {
            long print = Utils.longFromAlphaNumString(s);
            boolean verified = manager.verifyUserAndRepersist(print, contactSelectedUser);
            if (verified) {
                JOptionPane.showMessageDialog(this, "Contact verified!", "SOTRC", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Contact Not verified!", "SOTRC", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) { 
            JOptionPane.showMessageDialog(this, "Invalid fingerprint. Try again", "SOTRC", JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException npa) {
            JOptionPane.showMessageDialog(this, "Cancelled.", "SOTRC", JOptionPane.INFORMATION_MESSAGE);
        }
        //manager.verify(s, username);
        //System.out.println("VERIFIED");
        activeChatsTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_verifyUserActionPerformed

    private void getFingerprintUserMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getFingerprintUserMenuActionPerformed
        String fingerprint = Utils.longToAlphaNumString(manager.getUserFingerprint());
        JOptionPane.showMessageDialog(this,"Your public fingerprint:\n" + fingerprint);
    }//GEN-LAST:event_getFingerprintUserMenuActionPerformed

    private void userMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userMenuActionPerformed

    private void startChatRightClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startChatRightClickActionPerformed
        if(!contactSelectedUser.equals(""))
            startChat(contactSelectedUser);
    }//GEN-LAST:event_startChatRightClickActionPerformed

    private void removeContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeContactActionPerformed
        System.out.println("Removing contact " + contactSelectedUser);
        manager.removeContact(contactSelectedUser);
        updateContactsModel();
    }//GEN-LAST:event_removeContactActionPerformed
    
    private UUID getUUIDbyUsername(String user) {
        Iterator<?> it = activeChatWindows.entrySet().iterator();
        while (it.hasNext()) {
            ConcurrentHashMap.Entry pair = (ConcurrentHashMap.Entry)it.next();
            if(((ChatWindow)pair.getValue()).chatterUsername.equals(user)) {
                return ((ChatWindow)pair.getValue()).getUUID();
            }
        }
        return null;
    }
    
    private void addActiveChatsTableSelectListener() {
        activeChatsTable.addMouseListener(new MouseAdapter()
        {
                @Override
                public void mousePressed( MouseEvent e )
                {
                    try {
                    activeUserSelectedUser = activeChatsTable.getValueAt(activeChatsTable.getSelectedRow(), 0).toString();
                    } catch (ArrayIndexOutOfBoundsException eAI) {
                        // Do Nothing... we are not currently selecting an object
                        activeUserSelectedUser = "";
                        activeChatsTable.getSelectionModel().clearSelection();
                        return;
                    }
                    // Right mouse click
                    if ( SwingUtilities.isRightMouseButton( e ) )
                    {
                            // get the coordinates of the mouse click
                            Point p = e.getPoint();

                            // get the row index that contains that coordinate
                            int rowNumber = activeChatsTable.rowAtPoint( p );

                            // Get the ListSelectionModel of the JTable
                            activeChatsTable.getSelectionModel().setSelectionInterval(rowNumber, rowNumber);
                            if(!activeUserSelectedUser.equals(""))
                                activeChatsRightClickMenu.show(e.getComponent(), e.getX(), e.getY());
                    }
                    
                }
        });
    }
    
    private void addContactsTableSelectListener() {
        contactsTable.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mousePressed( MouseEvent e )
            {
                try {
                contactSelectedUser = contactsTable.getValueAt(contactsTable.getSelectedRow(), 0).toString();
                } catch (ArrayIndexOutOfBoundsException eAI) {
                    // Do Nothing... we are not currently selecting an object
                    contactSelectedUser = "";
                    contactsTable.getSelectionModel().clearSelection();
                    return;
                }
                // Right mouse click
                if ( SwingUtilities.isRightMouseButton( e ) )
                {
                    // get the coordinates of the mouse click
                    Point p = e.getPoint();
                    // get the row index that contains that coordinate
                    int rowNumber = contactsTable.rowAtPoint( p );
                    // Get the ListSelectionModel of the JTable
                    contactsTable.getSelectionModel().setSelectionInterval(rowNumber, rowNumber);
                    if(!contactSelectedUser.equals(""))
                        contactsRightClickMenu.show(e.getComponent(), e.getX(), e.getY());
                }
                
            }
        });
    }
    
    private void startChat(String inviteUsername) {
        if (inviteUsername == null || inviteUsername.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a username to start a chat.", "SOTRC", JOptionPane.ERROR_MESSAGE);
            return;
        } else if(inviteUsername.equals(manager.getCurrentUsername())){
            JOptionPane.showMessageDialog(this, "You cannot start a chat with yourself", "SOTRC", JOptionPane.ERROR_MESSAGE);
            return;   
        }

        Chat chat = manager.startChat(inviteUsername); // will automatically add to contact list.
        if (chat == null) {
            JOptionPane.showMessageDialog(this, "User does not exist or is not online", "SOTRC", JOptionPane.ERROR_MESSAGE);
        }

        ChatWindow chatWindow = new ChatWindow(chat.uuid, manager, inviteUsername);
        chatWindow.setTitle("Chat with " +inviteUsername);
        chatWindow.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        chatWindow.pack();
        chatWindow.setVisible(true);
        activeChatWindows.put(chat.uuid, chatWindow);
        updateActiveChatsTable();
        updateContactsModel();

        // check fingerprintstate routine.
        FingerprintState state = checkFingerprintAuthenticities(chatWindow, chat.keyFingerprints);
        // handle further if need be
    }
    
    private void updateActiveChatsTable() {
        activeChatsTable.setModel(getActiveChatsTableModel());
    }
    
    private TableModel getActiveChatsTableModel() {
        String[] columnNames = {"Username"};//, "Verified"};

        int numActiveChatWindows = activeChatWindows.size();
        int numActiveChats = manager.getNumberOfActiveChats();
        if (numActiveChats != numActiveChatWindows) {
            System.out.println("Mismatch of active chats");
            System.out.println("Active chat count: " + numActiveChats);
            System.out.println("Active windows: " + numActiveChatWindows);
        }

        Object[][] data = new Object[numActiveChatWindows][1];
        
        Set<UUID> usernames = activeChatWindows.keySet();
        Iterator<UUID> it =usernames.iterator();
        int i = 0;
        while(it.hasNext()) {
            ChatWindow window = activeChatWindows.get(it.next());
            data[i][0] = window.chatterUsername;
            i++;
        }
        // create model
        DefaultTableModel model = new DefaultTableModel(data,columnNames);
        return model;
    }
    
    private void updateContactsModel() {
        contactsTable.setModel(getContactListTableData());
    }
    
    private TableModel getContactListTableData() {
        String[] columnNames = {"Username", "Verified"};

        Set<Contact> contacts = manager.getContacts();

        Object[][] data = new Object[contacts.size()][2];
        
        int i = 0;
        for(Contact c: contacts) {
            data[i][0] = c;
            data[i++][1] = c.isAuthenticated();
        }
        // create model
        return new DefaultTableModel(data, columnNames);
    }

    private boolean logout() {
        int selectedOption = JOptionPane.showConfirmDialog(null,
                            "Are you sure you want to logout?",
                            "Logout?",
                            JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION) {
            try {
                manager.logout();
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
            manager.deleteObserver(this);
            this.dispose();
            parentWindow.setVisible(true);
            return true;
        } else {
            this.setVisible(true);
            return false;
        }
	}

    // if any fingerprint states are INAUTHENTIC, returns INAUTHENTIC
    // if all fingerprint states are AUTHENTIC, returns AUTHENTIC
    // else return NEITHER
    // side effects: sets window state appropriately and JOptionPane if INAUTHENTIC
    private FingerprintState checkFingerprintAuthenticities(ChatWindow window,
            Map<String, Tuple<Long, FingerprintState>> keyFingerprints) {
        if (window == null || keyFingerprints == null)
            return FingerprintState.NEITHER;

        boolean allAuthentic = true;
        for (String s : keyFingerprints.keySet()) {
            if (keyFingerprints.get(s).y == FingerprintState.INAUTHENTIC) {
                // change state in window, show message.
                window.setState(FingerprintState.INAUTHENTIC);
                JOptionPane.showMessageDialog(this,
                      "This chat contains participant(s) whose identity(ies)\n"
                    + "    are not those we encountered before.\n"
                    + "First of possibly many users with mismatched fingerprint:\n"
                    + "        " + s + "\n\n"
                    + "Proceed with caution, or quit the chat.",
                    "SOTRC",
                    JOptionPane.WARNING_MESSAGE);
                return FingerprintState.INAUTHENTIC;
            }
            allAuthentic = allAuthentic && keyFingerprints.get(s).y == FingerprintState.AUTHENTIC;
        }

        FingerprintState ret = allAuthentic ? FingerprintState.AUTHENTIC : FingerprintState.NEITHER;
        window.setState(ret);
        return ret;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SotrcActionsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SotrcActionsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SotrcActionsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SotrcActionsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SotrcActionsGUI(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ActiveChatsPanel;
    private javax.swing.JMenuBar SOTRCMenu;
    private javax.swing.JPanel StartChatPanel;
    private javax.swing.JPopupMenu activeChatsRightClickMenu;
    private javax.swing.JTable activeChatsTable;
    private javax.swing.JPopupMenu contactsRightClickMenu;
    private javax.swing.JTable contactsTable;
    private javax.swing.JMenuItem editUserUserMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem getFingerprintUserMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem logoutFileMenu;
    private javax.swing.JMenuItem openChat;
    private javax.swing.JMenuItem quitChat;
    private javax.swing.JMenuItem removeContact;
    private javax.swing.JButton startChatButton;
    private javax.swing.JMenuItem startChatRightClick;
    private javax.swing.JTextField txtStartChat;
    private javax.swing.JMenu userMenu;
    private javax.swing.JMenuItem userMenuDeleteAccount;
    private javax.swing.JMenuItem verifyUser;
    // End of variables declaration//GEN-END:variables

    private void setupComponents() {
        contactsTable.setDefaultRenderer(Object.class, new CustomCellRenderer());
    }

    private class CustomCellRenderer extends javax.swing.table.DefaultTableCellRenderer {
        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, java.lang.Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            java.awt.Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            // Always check column 0 for every row to highlight the whole row
            Contact contact = (Contact)table.getModel().getValueAt(row, 0);
            if(contact.isAuthenticated()) {
                if(isSelected) {
                    cellComponent.setBackground(VERIFIED_COLOR);
                    cellComponent.setForeground(Color.WHITE);
                } else {
                    cellComponent.setBackground(VERIFIED_COLOR);
                    cellComponent.setForeground(Color.BLACK);
                }
            } else {
                if(isSelected) {
                    cellComponent.setBackground(SELECTED_COLOR);
                    cellComponent.setForeground(Color.WHITE);
                } else {
                    cellComponent.setBackground(Color.WHITE);
                    cellComponent.setForeground(Color.BLACK);
                }
            }
            return cellComponent;
        }
    }

    @Override
    public void update(Observable o, Object object) {
        if (!(object instanceof AsyncNotifications)) {
            System.err.println("Don't know what this is, man.");
            return;
        }
        AsyncNotifications notification = (AsyncNotifications)object;
        String username = notification.username;
        UUID chatuuid = notification.chat.getUUID();
        if (notification.type == 0) { // New Chat
            ChatWindow chatWindow = new ChatWindow(chatuuid, manager, username);
            chatWindow.setTitle("Chat with " + username);
            chatWindow.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            chatWindow.pack();
            chatWindow.setVisible(true);
            activeChatWindows.put(chatuuid, chatWindow);
            updateActiveChatsTable();

            if (!manager.isInContacts(username)) {
                int selectedOption = JOptionPane.showConfirmDialog(null,
                                "Do you want to Accept this invitation from "+username+"?",
                                "Accept Invitation?",
                                JOptionPane.YES_NO_OPTION);
                if (selectedOption == JOptionPane.NO_OPTION) {
                    // call the exit chat handler
                    try {
                    activeChatWindows.get(chatuuid).dispose();
                    activeChatWindows.remove(chatuuid);
                    activeUserSelectedUser = "";
                    manager.endChat(chatuuid);
                    updateActiveChatsTable();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                else if(selectedOption == JOptionPane.YES_OPTION) {
                    manager.addContact(username);
                    updateContactsModel();
                }
            } else {
                FingerprintState state = checkFingerprintAuthenticities(chatWindow, notification.chat.keyFingerprints);
                // we can handle this further if need be
            }
        } else if (notification.type == 1) { // New Message in existing chat
            ChatWindow chatWindow = activeChatWindows.get(chatuuid);
            chatWindow.setVisible(true);
            chatWindow.incomingMessage(username, notification.message);
        } else if (notification.type == 2) { // user left
            ChatWindow chatWindow = activeChatWindows.get(chatuuid);
            chatWindow.setVisible(true);
            chatWindow.statusMessage(username + " left the chat.");
        } else if (notification.type == 3) { // end of chat.
            ChatWindow chatWindow = activeChatWindows.get(chatuuid);
            if (chatWindow == null) { // probably already closed. doesn't matter
                return;
            }
            chatWindow.statusMessage("Other user has quit the chat.");
            chatWindow.disableActions();
            activeChatWindows.remove(chatuuid);
            activeUserSelectedUser = "";
            updateActiveChatsTable();
        }
    }

}
